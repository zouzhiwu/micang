package com.game.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.JobKey;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cb.msg.Message;
import com.cb.msg.MsgSender;
import com.common.constant.FightConstant;
import com.common.entity.Account;
import com.common.entity.Hero;
import com.common.entity.Member;
import com.common.entity.OperateStep;
import com.common.entity.Player;
import com.common.entity.Room;
import com.common.enumerate.OperateType;
import com.common.enumerate.PosType;
import com.common.enumerate.RoomState;
import com.common.util.AssertUtil;
import com.game.common.MessageCode;
import com.game.dao.HeroDao;
import com.game.dao.MemberDao;
import com.game.helper.MsgHelper;
import com.game.job.JobScheduler;
import com.game.model.Model;

@Service
public class FightService {
	
	@Autowired
	private MemberDao memberDao;
	@Autowired
	private HeroDao heroDao;
	
//	private static final Logger logger = LoggerFactory.getLogger(MemberService.class);
	
	public void requestChallenge(Long redAccountId, Long blueAccountId) {
		Account blueAccount = Model.getInstance().accountMap.get(blueAccountId);
		AssertUtil.asWarnTrue(blueAccount != null, "被挑战的玩家不存在");
		AssertUtil.asWarnTrue(blueAccount.roomId == 0, "对方正在战斗中");
		Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_fight_challenge_notice);
		msg.putLong(redAccountId);
		MsgSender.sendMsg(msg, blueAccountId);
	}
	
	public void responseChallenge(Long blueAccountId, Long redAccountId, Boolean isAgree) {
		Account redAccount = Model.getInstance().accountMap.get(redAccountId);
		AssertUtil.asWarnTrue(redAccount != null, "发起挑战的玩家已经下线");
		// TODO 发起挑战的玩家已经进入战斗
		// TODO 创建房间
		int roomId;
		if (isAgree) {
			roomId = Model.getInstance().roomId.incrementAndGet();
			Account blueAccount = Model.getInstance().accountMap.get(blueAccountId);
			Room room = new Room();
			room.id = roomId;
			room.redPlayer = new Player();
			room.redPlayer.account = redAccount;
			room.bluePlayer = new Player();
			room.bluePlayer.account = blueAccount;
			// 设置房间状态为选择或禁用英雄
			room.state = RoomState.ChooseAndBan;
			redAccount.roomId = roomId;
			blueAccount.roomId = roomId;
			// 创建挑战者自动选择默认队员Job
			List<Member> redMemberList = memberDao.getByList(redAccountId);
			List<Member> memberList = redMemberList.stream().filter(m -> m.getIsDefault()).collect(Collectors.toList());
			AssertUtil.asWarnTrue(memberList.size() >= 5, "默认队员数量不足5人");
			Member[] redMembers = memberList.toArray(new Member[5]);
			JobScheduler.createChooseMemberJob(room.redPlayer, redMembers);
			// 创建被挑战者自动选择默认队员Job
			List<Member> blueMemberList = memberDao.getByList(redAccountId);
			Member[] blueMembers = (Member[]) blueMemberList.stream().filter(m -> m.getIsDefault()).toArray(Member[]::new);
			JobScheduler.createChooseMemberJob(room.bluePlayer, blueMembers);
		} else {
			roomId = 0;
		}
		List<Long> accountList = Arrays.asList(redAccountId, blueAccountId);
		Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_fight_challenge_response);
		msg.putLong(blueAccountId);
		msg.putBoolean(isAgree);
		msg.putInt(roomId);
		MsgHelper.sendBroadcast(msg, accountList);
	}
	
	public void chooseMember(Integer roomId, Long accountId, Long topMemberId
			, Long junMemberId, Long midMemberId, Long adcMemberId, Long supMemberId) {
		Room room = Model.getInstance().roomMap.get(roomId);
		AssertUtil.asWarnTrue(room != null, "房间不存在");
		Player player = getPlayerWithRoom(accountId, room);
		AssertUtil.asWarnTrue(player != null, "玩家不在房间");
		Member[] members = new Member[5];
		Member topMember = memberDao.getById(topMemberId);
		members[0] = topMember;
		Member junMember = memberDao.getById(junMemberId);
		members[1] = junMember;
		Member midMember = memberDao.getById(midMemberId);
		members[2] = midMember;
		Member adcMember = memberDao.getById(adcMemberId);
		members[3] = adcMember;
		Member supMember = memberDao.getById(supMemberId);
		members[4] = supMember;
		player.members = members;
		// 发送队员信息
		sendMemberInfo(room);
		
	}
	
	public void sendMemberInfo(Room room) {
		if (room.redPlayer.members != null && room.bluePlayer.members != null) {
			Message msg = new Message();
			msg.setMsgcd(MessageCode.msg_fight_member_info);
			Player asPlayer = room.redPlayer;
			msg.putLong(asPlayer.account.getId());
			msg.putLong(asPlayer.members[0].getId());
			msg.putByte(asPlayer.members[0].getStar());
			msg.putByte(asPlayer.members[0].getStage());
			msg.putLong(asPlayer.members[1].getId());
			msg.putByte(asPlayer.members[1].getStar());
			msg.putByte(asPlayer.members[1].getStage());
			msg.putLong(asPlayer.members[2].getId());
			msg.putByte(asPlayer.members[2].getStar());
			msg.putByte(asPlayer.members[2].getStage());
			msg.putLong(asPlayer.members[3].getId());
			msg.putByte(asPlayer.members[3].getStar());
			msg.putByte(asPlayer.members[3].getStage());
			msg.putLong(asPlayer.members[4].getId());
			msg.putByte(asPlayer.members[4].getStar());
			msg.putByte(asPlayer.members[4].getStage());
			Player bePlayer = room.bluePlayer;
			msg.putLong(bePlayer.account.getId());
			msg.putLong(bePlayer.members[0].getId());
			msg.putByte(bePlayer.members[0].getStar());
			msg.putByte(bePlayer.members[0].getStage());
			msg.putLong(bePlayer.members[1].getId());
			msg.putByte(bePlayer.members[1].getStar());
			msg.putByte(bePlayer.members[1].getStage());
			msg.putLong(bePlayer.members[2].getId());
			msg.putByte(bePlayer.members[2].getStar());
			msg.putByte(bePlayer.members[2].getStage());
			msg.putLong(bePlayer.members[3].getId());
			msg.putByte(bePlayer.members[3].getStar());
			msg.putByte(bePlayer.members[3].getStage());
			msg.putLong(bePlayer.members[4].getId());
			msg.putByte(bePlayer.members[4].getStar());
			msg.putByte(bePlayer.members[4].getStage());
			List<Long> accountList = Arrays.asList(asPlayer.account.getId(), bePlayer.account.getId());
			MsgHelper.sendBroadcast(msg, accountList);
			// 发送操作通知Job
			sendOperationNotice(room);
		}
	}
	
	public void sendOperationNotice(Room room) {
		// 战斗力高的玩家
		Player highPlayer = room.redPlayer;
		// 战斗力低的玩家
		Player lowPlayer = room.bluePlayer;
		List<OperateStep> operateStepList = new ArrayList<OperateStep>(16);
		// 第一步：战斗力高的一方禁用1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Ban));
		// 第二步：战斗力低的一方禁用1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Ban));
		// 第三步：战斗力高的一方禁用1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Ban));
		// 第四步：战斗力低的一方禁用1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Ban));
		// 第五步：战斗力高的一方选择1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Choose));
		// 第六步：战斗力低的一方选择1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Choose));
		// 第七步：战斗力低的一方选择1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Choose));
		// 第八步：战斗力高的一方选择1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Choose));
		// 第九步：战斗力高的一方选择1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Choose));
		// 第十步：战斗力低的一方选择1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Choose));
		// 第十一步：战斗力低的一方禁用1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Ban));
		// 第十二步：战斗力高的一方禁用1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Ban));
		// 第十三步：战斗力低的一方选择1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Choose));
		// 第十四步：战斗力高的一方选择1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Choose));
		// 第十五步：战斗力高的一方选择1位英雄。
		operateStepList.add(new OperateStep(highPlayer.account.getId(), OperateType.Choose));
		// 第十六步：战斗力低的一方选择1位英雄。
		operateStepList.add(new OperateStep(lowPlayer.account.getId(), OperateType.Choose));
		JobKey jobKey = JobScheduler.generateOperationNoticeJobKey(room.id);
		// 创建操作通知Job
		JobScheduler.createOperationNoticeJob(jobKey, operateStepList, room, 0);
	}
	
	public void banHero(Integer roomId, Long accountId, Integer heroTemplateId, Byte stepIndex) {
		Room room = Model.getInstance().roomMap.get(roomId);
		AssertUtil.asWarnTrue(room != null, "房间不存在");
		Player player = getPlayerWithRoom(accountId, room);
		AssertUtil.asWarnTrue(player != null, "玩家不在房间");
		JobKey jobKey = JobScheduler.generateOperationNoticeJobKey(room.id);
		if (JobScheduler.isHasJob(jobKey)) {
			JobDetail jobDetail = JobScheduler.getJobDetail(jobKey);
			JobDataMap jobDataMap = jobDetail.getJobDataMap();
			@SuppressWarnings("unchecked")
			List<OperateStep> operateStepList = (List<OperateStep>)jobDataMap.get("operateStepList");
			int index = (int)jobDataMap.get("index");
			AssertUtil.asWarnTrue(index == stepIndex, "超过本步骤");
			if (JobScheduler.stopJob(jobKey)) {
				// 设置被禁用的英雄
				Player otherPlayer = getOtherPlayerWithRoom(accountId, room);
				otherPlayer.banHeroTemplateIdList.add(heroTemplateId);
				index++;
				// 如果选择（禁用）操作未完成，则发送操作通知，否则发送阵容展示通知
				if (index < operateStepList.size()) {
					JobScheduler.createOperationNoticeJob(jobKey, operateStepList, room, index);
				} else {
					showLayout(room);
				}
			}
			List<Long> accountList = Arrays.asList(room.redPlayer.account.getId(), room.bluePlayer.account.getId());
			// 禁用英雄通知
			Message msg = new Message();
			msg.setMsgcd(MessageCode.msg_fight_ban_hero_notice);
			msg.putLong(accountId);
			msg.putLong(heroTemplateId);
			MsgHelper.sendBroadcast(msg, accountList);
		}
	}
	
	public void chooseHero(Integer roomId, Long accountId, Long heroId, Byte pos, Byte stepIndex) {
		Room room = Model.getInstance().roomMap.get(roomId);
		AssertUtil.asWarnTrue(room != null, "房间不存在");
		Player player = getPlayerWithRoom(accountId, room);
		AssertUtil.asWarnTrue(player != null, "玩家不在房间");
		JobKey jobKey = JobScheduler.generateOperationNoticeJobKey(room.id);
		if (JobScheduler.isHasJob(jobKey)) {
			PosType posType = PosType.getType(pos);
			AssertUtil.asWarnTrue(posType != null, "pos参数错误");
			JobDetail jobDetail = JobScheduler.getJobDetail(jobKey);
			JobDataMap jobDataMap = jobDetail.getJobDataMap();
			@SuppressWarnings("unchecked")
			List<OperateStep> operateStepList = (List<OperateStep>)jobDataMap.get("operateStepList");
			int index = (int)jobDataMap.get("index");
			AssertUtil.asWarnTrue(index == stepIndex, "超过本步骤");
			if (JobScheduler.stopJob(jobKey)) {
				Hero hero = heroDao.getById(heroId);
				AssertUtil.asWarnTrue(!player.banHeroTemplateIdList.contains(hero.getTemplateId()), "该英雄已被禁用");
				// 设置被选择的英雄
				player.chooseHeros[posType.getIndex() - 1] = hero;
				index++;
				// 如果选择（禁用）操作未完成，则发送操作通知，否则发送阵容展示通知
				if (index < operateStepList.size()) {
					JobScheduler.createOperationNoticeJob(jobKey, operateStepList, room, index);
				} else {
					showLayout(room);
				}
			}
			List<Long> accountList = Arrays.asList(room.redPlayer.account.getId(), room.bluePlayer.account.getId());
			// 选择英雄通知
			Message msg = new Message();
			msg.setMsgcd(MessageCode.msg_fight_choose_hero_notice);
			msg.putLong(accountId);
			msg.putLong(heroId);
			msg.putByte(pos);
			MsgHelper.sendBroadcast(msg, accountList);
		}
	}

	private Player getPlayerWithRoom(Long accountId, Room room) {
		Player player = null;
		if (room.redPlayer.account.getId().equals(accountId)) {
			player = room.redPlayer;
		} else if (room.bluePlayer.account.getId().equals(accountId)) {
			player = room.bluePlayer;
		}
		return player;
	}
	
	private Player getOtherPlayerWithRoom(Long accountId, Room room) {
		Player player = null;
		if (room.redPlayer.account.getId().equals(accountId)) {
			player = room.redPlayer;
		} else if (room.bluePlayer.account.getId().equals(accountId)) {
			player = room.bluePlayer;
		}
		return player;
	}
	
	private void showLayout(Room room) {
		List<Long> accountList = Arrays.asList(room.redPlayer.account.getId(), room.bluePlayer.account.getId());
		// 选择英雄通知
		Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_fight_show_layout);
		msg.putByte(FightConstant.show_layout_time_length);
		MsgHelper.sendBroadcast(msg, accountList);
		// 设置房间状态为阵容展示
		room.state = RoomState.ShowLayout;
		// 创建开始游戏Job
		JobScheduler.createBeginGameJob(room);
	}
}
