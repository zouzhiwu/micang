package com.game.config;

import java.awt.image.BufferedImage;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.common.entity.Location;
import com.common.enumerate.NodeType;
import com.common.util.MapUtil;

public class MapConfig {
	private final static Logger logger = LoggerFactory.getLogger(MapConfig.class);
	public static final List<Location> locationList = new ArrayList<Location>();
	/**以分米为单位的地图 **/
	public static byte[][] dmMap;
	
	public static void init() {
		logger.info("load map...");
		loadData("template/map.bmp");
	}
	
	private static void loadData(String fileName) {
		InputStream in = MapConfig.class.getClassLoader().getResourceAsStream(fileName);
		BufferedImage bi = null;
		try {
			bi = ImageIO.read(in);
		} catch (Exception e) {
			e.printStackTrace();
		}
		int srcWidth = bi.getWidth();
		int srcHeight = bi.getHeight();
		int minx = bi.getMinX();
		int miny = bi.getMinY();
		dmMap = new byte[srcHeight][srcWidth];
		for (int i = miny; i < srcHeight; i++) {
			for (int j = minx; j < srcWidth; j++) {
				int pixel = bi.getRGB(j, i);
//				int r = (pixel & 0x00ff0000) >> 16;
//				int g = (pixel & 0x0000ff00) >> 8;
//				int b = (pixel & 0x000000ff);
//		        System.out.println(String.format("pixel=%d r=%d g=%d b=%d", pixel, r, g, b));
				NodeType nodeType = MapUtil.toNodeType(pixel);
				if (nodeType == null) {
					logger.error(String.format("第%d行第%d列错误", j, i));
				} else {
					dmMap[i][j] = nodeType.getIndex();
				}
			}
		}
		// 以米为单位的地图
		byte[][] mMap = MapUtil.toMetre(dmMap, NodeType.ROAD);
		for (int i = 0; i < mMap.length; i++) {
			for (int j = 0; j < mMap[i].length; j++) {
				byte colorId = mMap[i][j];
				NodeType nodeType = NodeType.getType(colorId);
				if (nodeType == NodeType.ROAD || nodeType == NodeType.BLUE) {
					Location location = new Location(j, 0f, i);
					locationList.add(location);
				}
			}
		}
	}
	
	public static boolean isRoad(float x, float z) {
		int intx = (int)Math.ceil(x * 10);
		int intz = (int)Math.ceil(z * 10);
		byte value = dmMap[intz][intx];
		NodeType nodeType = NodeType.getType(value);
		return nodeType == NodeType.ROAD || nodeType == NodeType.BLUE;
	}
}