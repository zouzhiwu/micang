package com.game.job.room;

import java.util.Arrays;
import java.util.List;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.PersistJobDataAfterExecution;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cb.msg.Message;
import com.common.constant.RoomConstant;
import com.common.entity.OperateStep;
import com.common.entity.Room;
import com.game.common.MessageCode;
import com.game.helper.MsgHelper;
import com.game.job.JobScheduler;

@PersistJobDataAfterExecution
@DisallowConcurrentExecution
public class OperationNoticeJob implements Job {
	private final static Logger logger = LoggerFactory.getLogger(OperationNoticeJob.class);
	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		JobDetail jobDetail = context.getJobDetail();
		JobDataMap jobDataMap = jobDetail.getJobDataMap();
		@SuppressWarnings("unchecked")
		List<OperateStep> operateStepList = (List<OperateStep>)jobDataMap.get("operateStepList");
		byte stepIndex = (byte)jobDataMap.get("stepIndex");
		Room room = (Room)jobDataMap.get("room");
		OperateStep operateStep = operateStepList.get(stepIndex);
		logger.info(String.format("通知玩家%s执行%s(%d)操作", operateStep.getAccountId(), operateStep.getOperateType().getName(), stepIndex));
		List<Long> accountList = Arrays.asList(room.redPlayer.account.getId(), room.bluePlayer.account.getId());
		// 广播操作通知
		Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_room_operation_notice);
		msg.putLong(operateStep.getAccountId());
		msg.putByte(operateStep.getOperateType().getIndex());
		msg.putByte(RoomConstant.operation_notice_cd_time);
		msg.putByte(stepIndex);
		MsgHelper.sendBroadcast(msg, accountList);
		JobKey jobKey = jobDetail.getKey();
		if (JobScheduler.stopJob(jobKey)) {
			stepIndex++;
			// 如果没有超过16个步骤，则创建操作Job
			if (stepIndex < 16) { 
				JobKey nextJobKey = JobScheduler.getOperationNoticeJobKey(room.id, stepIndex);
				JobScheduler.createOperationNoticeJob(nextJobKey, operateStepList, room, stepIndex);
			}
		}
	}
}
