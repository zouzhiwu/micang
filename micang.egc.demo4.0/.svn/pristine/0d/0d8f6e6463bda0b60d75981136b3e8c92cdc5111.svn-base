package com.game.action;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.cb.msg.Action;
import com.cb.msg.Message;
import com.cb.msg.MsgSender;
import com.common.entity.Member;
import com.common.enumerate.CharacterSeat;
import com.common.enumerate.LevelType;
import com.common.template.MemberTemplate;
import com.game.common.MessageCode;
import com.game.config.MemberConfig;
import com.game.entity.CharacterBean;
import com.game.entity.LikeHeroDaoBean;
import com.game.service.CharacterService;
import com.game.service.MemberService;
import com.game.util.CommonUtil;
import com.game.util.LevelUtil;
import com.game.util.Params;
import com.game.util.PowerUtils;

import io.netty.channel.Channel;

@Service
public class MemberAction {

	private static final Logger logger = LoggerFactory.getLogger(MemberAction.class);

	@Autowired
	private MemberService meberService;
	@Autowired
	private CharacterService characterService;

	@Action(MessageCode.msg_member_list)
	public void getByList(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s", message.getMsgcd(), message.getAccountId()));
		Long accountId = message.getAccountId();
		List<Member> memberList = meberService.getByList(accountId);
		Message msg = new Message(message);
		msg.putShort(memberList.size());
		for (int i = 0; i < memberList.size(); i++) {
			Member member = memberList.get(i);
			msg.putLong(member.getId());
			msg.putInt(member.getTemplateId());
			msg.putByte(member.getStarSeat().byteValue());
			msg.putInt(member.getExp());
			msg.putByte(member.getStage());
			msg.putByte(member.getWork().getIndex());

			String[] memberTemplateArr = MemberConfig.map.get(member.getTemplateId()).getLikeHeros().split(Params.fenge);
			msg.putShort(Short.valueOf(memberTemplateArr.length+""));
			for (Integer jj = 0; jj < memberTemplateArr.length; jj++) {
				List<LikeHeroDaoBean> LikeHeroList = JSONObject.parseArray(member.getLikeHeros(), LikeHeroDaoBean.class);
				LikeHeroDaoBean temp = CommonUtil.getLikeHeroBeanByTemplateId(LikeHeroList, Integer.valueOf(memberTemplateArr[jj]));
				msg.putInt(Integer.valueOf(memberTemplateArr[jj]));//member.getLikeHero1()
				if(temp!=null) {
					msg.putInt(temp.getLikeVal());// member.getLikeVal1()
					msg.putByte(temp.getSeat().byteValue());
					msg.putInt(temp.getHeroLevel());
				} else {
					msg.putInt(0);// member.getLikeVal1()
					msg.putByte(Byte.valueOf("0"));
					msg.putInt(1);
				}
			}

			msg.putInt(member.getMasterSkill());
			msg.putInt(member.getMaskerSkillLv());
			msg.putInt(member.getSlaveSkill1());
			msg.putInt(member.getSlaveSkillLv1());
			msg.putInt(member.getSlaveSkill2());
			msg.putInt(member.getSlaveSkillLv2());
			msg.putInt(member.getSlaveSkill3());
			msg.putInt(member.getSlaveSkillLv3());

			CharacterBean cb1 = characterService.getCharacterBean(member.getCharacterstr(), CharacterSeat.Seat1);
			msg.putInt(cb1.getCharacterId());
			msg.putInt(cb1.getCharactervalue1Id());
			msg.putInt(cb1.getCharactervalue2Id());

			CharacterBean cb2 = characterService.getCharacterBean(member.getCharacterstr(), CharacterSeat.Seat2);
			msg.putInt(cb2.getCharacterId());
			msg.putInt(cb2.getCharactervalue1Id());
			msg.putInt(cb2.getCharactervalue2Id());
			// 战力
			MemberTemplate memberTemplate = MemberConfig.map.get(member.getTemplateId());
			int power = PowerUtils.getPower(memberTemplate, LevelUtil.getLevel(LevelType.Member, member.getExp()));
			msg.putInt(power);
		}
		MsgSender.sendMsg(msg);
	}

	@Action(MessageCode.msg_member_recruit)
	public void recruit(Message message, Channel channel) throws Exception {
		byte currencyType = message.getByte();
		byte count = message.getByte();
		logger.info(String.format("RESV %d from accountId=%s currencyType=%d count=%d", message.getMsgcd(),
				message.getAccountId(), currencyType, count));
		Member member = meberService.recruit(message.getAccountId(), currencyType, count);
		Message msg = new Message(message);
		// 是否招募到队员
		boolean isHit = member != null;
		msg.putBoolean(isHit);
		// 如果招募到队员，则发送队员消息，否则发送卡牌消息
		if (isHit) {
			msg.putLong(member.getId());
			msg.putInt(member.getTemplateId());
			msg.putByte(member.getStarSeat().byteValue());
			msg.putInt(member.getExp());
			msg.putByte(member.getStage());
			msg.putByte(member.getWork().getIndex());

			String[] memberTemplateArr = MemberConfig.map.get(member.getTemplateId()).getLikeHeros().split(Params.fenge);
			msg.putShort(Short.valueOf(memberTemplateArr.length+""));
			for (Integer jj = 0; jj < memberTemplateArr.length; jj++) {
				List<LikeHeroDaoBean> LikeHeroList = JSONObject.parseArray(member.getLikeHeros(), LikeHeroDaoBean.class);
				LikeHeroDaoBean temp = CommonUtil.getLikeHeroBeanByTemplateId(LikeHeroList, Integer.valueOf(memberTemplateArr[jj]));
				msg.putInt(Integer.valueOf(memberTemplateArr[jj]));//member.getLikeHero1()
				if(temp!=null) {
					msg.putInt(temp.getLikeVal());// member.getLikeVal1()
					msg.putByte(temp.getSeat().byteValue());
					msg.putInt(temp.getHeroLevel());
				} else {
					msg.putInt(0);// member.getLikeVal1()
					msg.putByte(Byte.valueOf("0"));
					msg.putInt(1);
				}
			}

			msg.putInt(member.getMasterSkill());
			msg.putInt(member.getMaskerSkillLv());
			msg.putInt(member.getSlaveSkill1());
			msg.putInt(member.getSlaveSkillLv1());
			msg.putInt(member.getSlaveSkill2());
			msg.putInt(member.getSlaveSkillLv2());
			msg.putInt(member.getSlaveSkill3());
			msg.putInt(member.getSlaveSkillLv3());

			CharacterBean cb1 = characterService.getCharacterBean(member.getCharacterstr(), CharacterSeat.Seat1);
			msg.putInt(cb1.getCharacterId());
			msg.putInt(cb1.getCharactervalue1Id());
			msg.putInt(cb1.getCharactervalue2Id());

			CharacterBean cb2 = characterService.getCharacterBean(member.getCharacterstr(), CharacterSeat.Seat2);
			msg.putInt(cb2.getCharacterId());
			msg.putInt(cb2.getCharactervalue1Id());
			msg.putInt(cb2.getCharactervalue2Id());

			// 战力
			MemberTemplate memberTemplate = MemberConfig.map.get(member.getTemplateId());
			int power = PowerUtils.getPower(memberTemplate, LevelUtil.getLevel(LevelType.Member, member.getExp()));
			msg.putInt(power);

			MsgSender.sendMsg(msg);
		} else {
			MsgSender.sendMsg(msg);
		}
	}

	@Action(MessageCode.msg_member_set_goto_work)
	public void gotoWork(Message message, Channel channel) {
		Long topMemberId = message.getLong(); // 上单队员Id
		Long midMemberId = message.getLong(); // 中单队员Id
		Long junMemberId = message.getLong(); // 打野队员Id
		Long supMemberId = message.getLong(); // 辅助队员Id
		Long adcMemberId = message.getLong(); // 输出队员Id
		logger.info(String.format(
				"RESV %d from accountId=%s topMemberId=%s junMemberId=%s midMemberId=%s adcMemberId=%s supMemberId=%s",
				message.getMsgcd(), message.getAccountId(), topMemberId, junMemberId, midMemberId, adcMemberId,
				supMemberId));
		meberService.gotoWork(message.getAccountId(), topMemberId, junMemberId, midMemberId, adcMemberId, supMemberId);
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}

	@Action(MessageCode.msg_member_update_lv)
	public void updateLv(Message message, Channel channel) {
		// 队员Id
		long id = message.getLong();
		byte levelCount = message.getByte();
		meberService.updateLv(message.getAccountId(), id, levelCount);
	}

	@Action(MessageCode.msg_member_update_duan)
	public void updateDuan(Message message, Channel channel) {
		long memberId = message.getLong();
		meberService.updateDuan(message.getAccountId(), memberId);
	}

	@Action(MessageCode.msg_member_expPot)
	public void getExpPot(Message message, Channel channel) {
		meberService.getExpPot(message.getAccountId());
	}

	@Action(MessageCode.msg_member_update_star)
	public void updateStar(Message message, Channel channel) {
		long memberId = message.getLong();
		byte type = message.getByte();
		meberService.updateStar(message.getAccountId(), memberId, type);
	}

	@Action(MessageCode.msg_member_add_hero)
	public void memberAddHero(Message message, Channel channel) {
		long memberId = message.getLong();
		int heroTemplateId = message.getInt();
		byte seat = message.getByte();
		meberService.memberAddHero(message.getAccountId(), memberId, heroTemplateId, seat);
	}

	@Action(MessageCode.msg_member_character)
	public void memberCharacter(Message message, Channel channel) {
		long memberId = message.getLong();
		byte seat = message.getByte();
		meberService.memberCharacter(message.getAccountId(), memberId, seat);
	}

	@Action(MessageCode.msg_member_character_update)
	public void memberCharacterUpdate(Message message, Channel channel) {
		long memberId = message.getLong();
		byte seat = message.getByte();
		int characterId = message.getInt();
		int charactervalue1Id = message.getInt();
		int charactervalue2Id = message.getInt();
		meberService.memberCharacterUpdate(message.getAccountId(), memberId, seat, characterId, charactervalue1Id,
				charactervalue2Id);
	}

}
