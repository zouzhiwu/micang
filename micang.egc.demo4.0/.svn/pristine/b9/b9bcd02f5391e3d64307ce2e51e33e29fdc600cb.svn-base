package com.game.job.fight;

import java.util.ArrayList;
import java.util.List;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.PersistJobDataAfterExecution;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.common.enumerate.ArmsType;
import com.common.enumerate.CampType;
import com.game.entity.Room;
import com.game.job.JobScheduler;
import com.game.node.TroopsNode;

@PersistJobDataAfterExecution
@DisallowConcurrentExecution
public class ArsenalJob implements Job {
	private final static Logger logger = LoggerFactory.getLogger(ArsenalJob.class);
	@SuppressWarnings("unchecked")
	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		JobDetail jobDetail = context.getJobDetail();
		JobDataMap jobDataMap = jobDetail.getJobDataMap();
		Room room = (Room)jobDataMap.get("room");
		Integer index = (Integer)jobDataMap.get("index");
		List<List<TroopsNode>> buleTroopsNodeList = (List<List<TroopsNode>>)jobDataMap.get("buleTroopsNodeList");
		List<TroopsNode> buleTopTroopsNodeList = buleTroopsNodeList.get(0);
		List<TroopsNode> buleMidTroopsNodeList = buleTroopsNodeList.get(1);
		List<TroopsNode> buleDownTroopsNodeList = buleTroopsNodeList.get(2);
		
		List<TroopsNode> troopsNodeList = new ArrayList<TroopsNode>();
		if (buleTopTroopsNodeList.size() > index) {
			TroopsNode troopsNode = buleTopTroopsNodeList.get(index);
			troopsNodeList.add(troopsNode);
		}
		if (buleMidTroopsNodeList.size() > index) {
			TroopsNode troopsNode = buleMidTroopsNodeList.get(index);
			troopsNodeList.add(troopsNode);
		}
		if (buleDownTroopsNodeList.size() > index) {
			TroopsNode troopsNode = buleDownTroopsNodeList.get(index);
			troopsNodeList.add(troopsNode);
		}
		List<List<TroopsNode>> redTroopsNodeList = (List<List<TroopsNode>>)jobDataMap.get("redTroopsNodeList");
		List<TroopsNode> redTopTroopsNodeList = redTroopsNodeList.get(0);
		List<TroopsNode> redMidTroopsNodeList = redTroopsNodeList.get(1);
		List<TroopsNode> redDownTroopsNodeList = redTroopsNodeList.get(2);
		if (redTopTroopsNodeList.size() > index) {
			TroopsNode troopsNode = redTopTroopsNodeList.get(index);
			troopsNodeList.add(troopsNode);
		}
		if (redMidTroopsNodeList.size() > index) {
			TroopsNode troopsNode = redMidTroopsNodeList.get(index);
			troopsNodeList.add(troopsNode);
		}
		if (redDownTroopsNodeList.size() > index) {
			TroopsNode troopsNode = redDownTroopsNodeList.get(index);
			troopsNodeList.add(troopsNode);
		}
		for (int i = 0; i < troopsNodeList.size(); i++) {
			TroopsNode troopsNode = troopsNodeList.get(i);
			// 启动移动Job
			troopsNode.startMove();
			// 启动视野Job
			troopsNode.startUpdateVision();
			room.putNode(troopsNode);
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < troopsNodeList.size(); i++) {
			TroopsNode troopsNode = troopsNodeList.get(i);
			if (troopsNode.selfCamp == CampType.Blue) {
				ArmsType armsType = ArmsType.getType(troopsNode.template.getArmsType());
				if (ArmsType.Soldier == armsType) {
					sb.append(",蓝方小兵" + troopsNode.nodeId);
				} else if (ArmsType.Artillery == armsType) {
					sb.append(",蓝方炮兵" + troopsNode.nodeId);
				} else if (ArmsType.Super == armsType) {
					sb.append(",蓝方超级兵" + troopsNode.nodeId);
				}
			} else if (troopsNode.selfCamp == CampType.Red) {
				ArmsType armsType = ArmsType.getType(troopsNode.template.getArmsType());
				if (ArmsType.Soldier == armsType) {
					sb.append(",红方小兵" + troopsNode.nodeId);
				} else if (ArmsType.Artillery == armsType) {
					sb.append(",红方炮兵" + troopsNode.nodeId);
				} else if (ArmsType.Super == armsType) {
					sb.append(",红方超级兵" + troopsNode.nodeId);
				}
			}
		}
		if (sb.length() > 0) {
			sb.deleteCharAt(0);
			logger.info("出兵：" + sb.toString());
		}
		jobDataMap.put("index", ++index);
		if (index >= buleTopTroopsNodeList.size() && index >= buleMidTroopsNodeList.size() && index >= buleDownTroopsNodeList.size()) {
			if (index >= redTopTroopsNodeList.size() && index >= redMidTroopsNodeList.size() && index >= redDownTroopsNodeList.size()) {
				JobKey jobKey = jobDetail.getKey();
				JobScheduler.stopJob(jobKey);
			}
		}
	}
}
