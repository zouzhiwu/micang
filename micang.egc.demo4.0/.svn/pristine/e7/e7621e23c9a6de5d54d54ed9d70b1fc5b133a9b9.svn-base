package com.game.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.cb.util.CBUtils;
import com.common.enumerate.ProfileType;
import com.common.util.AssertUtil;
import com.game.config.AppConfig;
import com.game.dao.ItemDao;
import com.game.entity.Bag;
import com.game.entity.Item;

@Component
public class ItemService {

	@Autowired
	private ItemDao itemDao;
	
	private static final Logger logger = LoggerFactory.getLogger(ItemService.class);
	
	/**
	 * 查询用户背包
	 */
	public Bag getItemList(Long accountId) {
		Bag bag = itemDao.findById(accountId);
		if (AppConfig.getProfile() != ProfileType.Production) {
			if(bag == null) {
				bag = new Bag();
				bag.setId(accountId);
				Map<Integer, Item> itenMap = new HashMap<Integer, Item>();
				itenMap.put(1008001, new Item(1008001, 99));
				itenMap.put(1008002, new Item(1008002, 999));
				itenMap.put(1008003, new Item(1008003, 1200));
				itenMap.put(1008004, new Item(1008004, 100));
				itenMap.put(1003001, new Item(1003001, 120));
				itenMap.put(1003002, new Item(1003002, 130));
				itenMap.put(1003003, new Item(1003003, 140));
				itenMap.put(1003004, new Item(1003004, 150));
				itenMap.put(1003005, new Item(1003005, 160));
				itenMap.put(1003006, new Item(1003006, 170));
				itenMap.put(1003007, new Item(1003007, 180));
				bag.setItemBytes(CBUtils.getBytesFromObject(itenMap));
				itemDao.create(bag);
			}
		}
		return bag;
	}
	
	@SuppressWarnings("unchecked")
	public Item useItem(Integer templateId, Integer count, Long accountId) {
		AssertUtil.asWarnTrue(null != templateId, "道具id不能为空");
		AssertUtil.asWarnTrue(null != count && count > 0, "道具使用数量不能为小于1");
		Bag bag = itemDao.findById(accountId);
		AssertUtil.asWarnTrue(null != bag, "背包为空");
		Map<Integer, Item> itemMap = (Map<Integer, Item>) CBUtils.getObjectFromBytes(bag.getItemBytes());
		AssertUtil.asWarnTrue(itemMap.containsKey(templateId), "背包没有指定道具");
		Item item = itemMap.get(templateId);
		AssertUtil.asWarnTrue(item.getCount() >= count, "道具要使用的数量大于拥有的数量！");
		int num = item.getCount() - count;
		item.setCount(num);
		itemMap.put(templateId, item);
		bag.setItemBytes(CBUtils.getBytesFromObject(itemMap));
		itemDao.update(bag);
		return item;
	}
	
	@SuppressWarnings("unchecked")
	public void settlementItem(Long accountId, List<Item> itemList) {
		Bag bag = itemDao.findById(accountId);
		if(bag == null) {
			//玩家第一次放入道具，背包初始化
			bag = new Bag();
			bag.setId(accountId);
			Map<Integer, Item> itemMap= new HashMap<Integer, Item>();
			itemList.stream().forEach(item -> itemMap.put(item.getTemplateId(), item));
			bag.setItemBytes(CBUtils.getBytesFromObject(itemMap));
			itemDao.create(bag);
		} else {
			//判断道具原来是否有，没有则新增，有则增加数量
			Map<Integer, Item> itemMap = (Map<Integer, Item>) CBUtils.getObjectFromBytes(bag.getItemBytes());
			itemList.stream().forEach(item -> { 
				if(itemMap.containsKey(item.getTemplateId())) {
					Item itemTemp = itemMap.get(item.getTemplateId());
					itemTemp.setCount(itemTemp.getCount()+item.getCount());
					itemMap.put(item.getTemplateId(), itemTemp);
				} else {
					itemMap.put(item.getTemplateId(), item);
				} 
			});
			bag.setItemBytes(CBUtils.getBytesFromObject(itemMap));
			itemDao.update(bag);
		}	
	}
	
	/**查询多个道具详情**/
	@SuppressWarnings("unchecked")
	public Map<Integer, Item> itemsInfo(Long accountId, List<Integer> itemIdList) {
		Bag bag = itemDao.findById(accountId);
		Map<Integer, Item> itenInfoMap = new HashMap<Integer, Item>();
		if(bag == null) {
			itemIdList.stream().forEach(itemId -> {
				itenInfoMap.put(itemId, new Item(itemId, 0));
			});
		} else {
			Map<Integer, Item> itemMap = (Map<Integer, Item>)CBUtils.getObjectFromBytes(bag.getItemBytes());
			itemIdList.stream().forEach(itemId -> {
				if(itemMap.containsKey(itemId)) {
					itenInfoMap.put(itemId, itemMap.get(itemId));
				} else {
					itenInfoMap.put(itemId, new Item(itemId, 0));
				}
			});
		}
		return itenInfoMap;
	}
	
	/**多个道具使用**/
	@SuppressWarnings("unchecked")
	public void useItems(Long accountId, List<Item> itemList) {
		Bag bag = itemDao.findById(accountId);
		//不考虑使用失败的情况！
		try {
			Map<Integer, Item> itemMap = (Map<Integer, Item>)CBUtils.getObjectFromBytes(bag.getItemBytes());
			itemList.stream().forEach(item -> {
				Item tempItem = itemMap.get(item.getTemplateId());
				tempItem.setCount(tempItem.getCount() - item.getCount());
				itemMap.put(item.getTemplateId(), tempItem);
			});
			bag.setItemBytes(CBUtils.getBytesFromObject(itemMap));
			itemDao.update(bag);
		} catch (Exception e) {
			logger.debug("使用道具异常！itemList={0}",itemList);
		}
	}
}
