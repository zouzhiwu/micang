package com.game.node;

import org.quartz.JobKey;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cb.msg.Message;
import com.common.enumerate.CampType;
import com.common.enumerate.NodeType;
import com.common.enumerate.TargetType;
import com.common.util.GameUtil;
import com.game.common.MessageCode;
import com.game.entity.Room;
import com.game.job.JobScheduler;

/***
 * 具备视野性质和攻击性质的抽象节点
 */
public abstract class BaseAttackNode extends BaseNode {
	private static final Logger logger = LoggerFactory.getLogger(BaseAttackNode.class);
    /**攻击JobKey*/
    public JobKey attackJobKey;
    
    /**视野JobKey */
	public JobKey updateVisionJobKey;
	
	/**攻击目标*/
	public Target target;
    
    public abstract void startAttack();
    
    public abstract void stopAttack();
    
    public abstract short getAoe();
    
    public void attack(JobKey jobKey, short aoe) {
        // 如果目标是节点，则计算攻击伤害
        if (target.type == TargetType.Node) {
        	if (target.node.hp > 0) {
        		// 如果当前位置和目标位置小于射程，则减少对方血量
                if (GameUtil.distance(this.location, target.node.location) <= aoe) {
                    // 扣血，并处理小于0的情况
                	target.node.hp -= 100;
                	logger.info(String.format("nodeId=%d hp=%d", target.node.nodeId, target.node.hp));
                    // 如果对方血量为0，则结束攻击
                    if (target.node.hp <= 0) {
                    	target.node.hp = 0;
                        // 阵亡处理
                    	target.node.die(this);
                    	// 如果当前节点是军队，则把对方基地作为目标寻路
                    	if (this.getNodeType() == NodeType.Troops) {
                    		TroopsNode node = (TroopsNode)this;
                    		if (node.selfCamp == CampType.Blue) {
                    			HomeNode redHomeNode = room.getRedHome();
                    			node.setTarget(new Target(redHomeNode));
                    		} else {
                    			HomeNode buleHomeNode = room.getRedHome();
                    			node.setTarget(new Target(buleHomeNode));
                    		}
                    		node.autoSearchWay(aoe);
                    		node.startMove();
                    	}
                    	JobScheduler.stopJob(jobKey);
                    }
                    sendHpMessage(room, this, target.node);
                } else {
                	JobScheduler.stopJob(jobKey);
                }
        	} else {
        		// 如果目标已经阵亡，则停止攻击
        		logger.error(String.format("nodeId(%d)停止攻击", this.nodeId));
        		JobScheduler.stopJob(jobKey);
        		// 如果当前节点是军队，则把对方基地作为目标寻路
        		if (this.getNodeType() == NodeType.Troops) {
            		TroopsNode node = (TroopsNode)this;
            		if (node.selfCamp == CampType.Blue) {
            			HomeNode redHomeNode = room.getRedHome();
            			node.setTarget(new Target(redHomeNode));
            		} else {
            			HomeNode buleHomeNode = room.getRedHome();
            			node.setTarget(new Target(buleHomeNode));
            		}
            		node.autoSearchWay(aoe);
            		node.startMove();
            	}
        		
        	}
        } else {
        	logger.error(String.format("nodeId(%d)攻击攻击目标错误", this.nodeId));
        }
    }
    
    private void sendHpMessage(Room room, BaseNode asNode, BaseNode beNode) {
    	Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_fight_hp_notice);
		msg.putShort(asNode.nodeId);
		msg.putShort(asNode.location.x);
		msg.putShort(asNode.location.y);
		msg.putInt(asNode.hp);
		msg.putShort(beNode.nodeId);
		msg.putShort(beNode.location.x);
		msg.putShort(beNode.location.y);
		msg.putInt(beNode.hp);
//		MsgHelper.sendBroadcast(msg, room);
    }
    
}
