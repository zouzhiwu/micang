package com.game.action;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cb.cache.ChannelCache;
import com.cb.msg.Action;
import com.cb.msg.Message;
import com.cb.msg.MsgSender;
import com.cb.util.ChannelUtil;
import com.common.entity.Location;
import com.common.helper.TimeHelper;
import com.common.util.MD5Util;
import com.game.common.MessageCode;
import com.game.service.RoomService;
import com.game.service.SkillService;

import io.netty.channel.Channel;

@Service
public class RoomAction {

	private static final Logger logger = LoggerFactory.getLogger(RoomAction.class);

	@Autowired
	private RoomService roomService;
	@Autowired
	private SkillService skillService;
	
	/**
	 * 准备
	 */
	@Action(MessageCode.msg_room_ready)
	public void ready(Message message, Channel channel) throws Exception {
		byte flag = message.getByte();
		logger.info(String.format("RESV %d from accountId=%s flag=%s", message.getMsgcd(), message.getAccountId(), flag));
		if (flag == 1) {
			roomService.ready(message.getAccountId());
		} else {
			roomService.cancelReady(message.getAccountId());
		}
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}
	
	/**
	 * 确认游戏
	 */
	@Action(MessageCode.msg_room_enter_game)
	public void enterGame(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s", message.getMsgcd(), message.getAccountId()));
		roomService.enterGame(message.getAccountId());
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}

	/**
	 * 设置出生地
	 */
	@Action(MessageCode.msg_room_set_birthplace)
	public void setBirthplace(Message message, Channel channel) throws Exception {
		float x = message.getFloat();	// 出生地x
		float z = message.getFloat();	// 出生地z
		logger.info(String.format("RESV %d from accountId=%s x=%s z=%s"
				, message.getMsgcd(), message.getAccountId(), x, z));
		Location location = roomService.setBirthplace(message.getAccountId(), x, z);
		Message msg = new Message(message);
		msg.putFloat(location.x);		// 出生地坐标x
		msg.putFloat(location.z);		// 出生地坐标z
		MsgSender.sendMsg(msg);
	}
	
	/**
	 * 设置自身技能
	 */
	@Action(MessageCode.msg_room_set_self_skill)
	public void setSelfSkill(Message message, Channel channel) throws Exception {
		byte selfSkillId = message.getByte();	// 1.自身治疗; 2.无敌; 3.魔免; 4.闪现; 5.坐骑; 6.救治倒地队友
		logger.info(String.format("RESV %d from accountId=%s selfSkillId=%d"
				, message.getMsgcd(), message.getAccountId(), selfSkillId));
		skillService.setSelfSkill(message.getAccountId(), selfSkillId);
		Message msg = new Message(message);
		msg.putByte(selfSkillId);
		MsgSender.sendMsg(msg);
	}
	
	/**
	 * 玩家断线重连游戏
	 */
	@Action(MessageCode.msg_room_get_my_info)
	public void intoGame(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s" , message.getMsgcd(), message.getAccountId()));
		roomService.intoGame(message.getAccountId());
	}
	
	/**
	 * 设置继续游戏或重新游戏
	 */
	@Action(MessageCode.msg_room_continue_again)
	public void continueOrAgain(Message message, Channel channel) throws Exception {
		byte continueOrAgain = message.getByte();	// 1.继续游戏，2.重新游戏
		logger.info(String.format("RESV %d from accountId=%s" , message.getMsgcd(), message.getAccountId()));
		roomService.continueOrAgain(message.getAccountId(), continueOrAgain);
		Message msg = new Message(message);
		msg.setErrorcd(MessageCode.msg_status_success);
		msg.putByte(continueOrAgain);				// 1.继续游戏，2.重新游戏
		MsgSender.sendMsg(msg);
	}
	
	/**
	 * 客户端通知服务器端加载完成
	 */
	@Action(MessageCode.msg_room_load_finish)
	public void loadFinish(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s" , message.getMsgcd(), message.getAccountId()));
		roomService.loadFinish(message.getAccountId());
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}
	
	/**
	 * 获取在线玩家列表
	 */
	@Action(MessageCode.msg_room_online_list)
	public void getOnlineList(Message message, Channel channel) throws Exception {
		Integer pageIndex = message.getInt();		// 页码，每页x条记录
		Integer pageSize = message.getInt();		// 页码，每页x条记录
		logger.info(String.format("RESV %d from accountId=%s pageIndex=%d pageSize=%d", message.getMsgcd(), message.getAccountId(), pageIndex, pageSize));
		roomService.getOnlineList(message.getAccountId(), pageIndex, pageSize);
	}
	
	/**
	 * 退回房间
	 */
	@Action(MessageCode.msg_room_back)
	public void backRoom(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s", message.getMsgcd(), message.getAccountId()));
		roomService.backRoom(message.getAccountId());
	}
	
	/**
	 * 获取战绩信息
	 */
	@Action(MessageCode.msg_room_score_info)
	public void getScoreInfo(Message message, Channel channel) throws Exception {
		long roleId = message.getLong();
		logger.info(String.format("RESV %d from accountId=%s roleId=%s", message.getMsgcd(), message.getAccountId(), roleId));
		roomService.getScoreInfo(roleId);
	}
	
	/**
	 * 连接游戏服务器
	 */
	@Action(MessageCode.msg_room_connect)
	public void connectRoom(Message message, Channel channel) throws Exception {
		Long accountId = message.getAccountId();
		Integer roomId = message.getInt();
		String sign = message.getString();
		logger.info(String.format("RESV %d from accountId=%s roomId=%s", message.getMsgcd(), accountId, roomId));
		String srtSign = MD5Util.hmac_md5(String.valueOf(accountId));
		if (StringUtils.equals(srtSign, sign)) {
			ChannelUtil.setHeartbeatTime(channel, TimeHelper.getTime());
//			ChannelUtil.setToken(channel, token);
			ChannelCache.putChannel(accountId, channel);
			// 在通道上设置房间Id
			ChannelUtil.setRoomId(channel, roomId);
			roomService.connectRoom(accountId, roomId);
			Message msg = new Message(message);
			MsgSender.sendMsg(msg);
		}
	}
}
