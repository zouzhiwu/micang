package com.game.entity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.quartz.JobKey;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.common.entity.OperateStep;
import com.common.enumerate.CampType;
import com.common.enumerate.NodeType;
import com.common.enumerate.RoomState;
import com.common.enumerate.WorkType;

public class Room {
	private static final Logger logger = LoggerFactory.getLogger(Room.class);
	/** 房间Id */
	public int id;
	
	/** 被挑战者，蓝方 */
	public Player bluePlayer;
	
	/** 挑战者，红方 */
	public Player redPlayer;
	
	/** 房间状态，0-准备，1-开始，2-结算*/
	public RoomState state;
	
	/** 操作步骤列表*/
	public List<OperateStep> operateStepList;
	
	/** 第index步骤，从0开始*/
	public Byte stepIndex;
	
	/** 自动操作JobKey*/
	public JobKey autoOperationJobKey;
	
	private Map<Short, BaseNode> nodeMap = new HashMap<Short, BaseNode>();
	
	private Lock lock = new ReentrantLock();
	
	public Hero getHero(short nodeId) {
		return (Hero)nodeMap.get(nodeId);
	}
	
	public Hero getHero(CampType camp, WorkType workType) {
		List<Hero> heroList = getHeroList(camp);
		for (Hero hero : heroList) {
			if (hero.template.getWork() == workType.getIndex()) {
				return hero;
			}
		}
		return null;
	}
	
	public BaseNode getNode(short nodeId) {
		return (BaseNode)nodeMap.get(nodeId);
	}
	
	public List<BaseNode> getAllList() {
		return getNodeList(null, null);
	}
	
	public List<Hero> getHeroList() {
		return getNodeList(NodeType.Hero, null);
	}
	
	public List<Hero> getHeroList(CampType camp) {
		return getNodeList(NodeType.Hero, camp);
	}
	
	public List<Hero> getHeroList(CampType camp, boolean isSortByWork) {
		List<Hero> heroList = getNodeList(NodeType.Hero, camp);
		if (isSortByWork) {
			Collections.sort(heroList, new Comparator<Hero>() {
				@Override
				public int compare(Hero hero1, Hero hero2) {
					int diff = hero1.template.getWork() - hero2.template.getWork();
					if (diff > 0) {
						return 1;
					} else if (diff < 0) {
						return -1;
					} else {
						return 0;
					}
				}
			});
		}
		return heroList;
	}
	
	@SuppressWarnings("unchecked")
	public <T extends BaseNode> List<T> getNodeList(CampType camp) {
		return (List<T>)getNodeList(null, camp);
	}
	
	@SuppressWarnings("unchecked")
	public <T extends BaseNode> List<T> getNodeList(NodeType nodeType) {
		return (List<T>)getNodeList(nodeType, null);
	}
	
	@SuppressWarnings("unchecked")
	public <T extends BaseNode> List<T> getNodeList(NodeType nodeType, CampType camp) {
		List<BaseNode> nodeList = new ArrayList<BaseNode>();
		lock.lock();
		try {
			nodeMap.forEach((nodeId, node) -> {
				if (nodeType == null) {
					if (node.selfCamp == camp) {
						nodeList.add(node);
					}
				} else if (camp == null) {
					if (node.getNodeType() == nodeType) {
						nodeList.add(node);
					}
				} else {
					if (node.getNodeType() == nodeType && node.selfCamp == camp) {
						nodeList.add(node);
					}
				}
			});
		} catch(Exception e){
			logger.error(e.toString());
        } finally {
            lock.unlock();
        }
		return (List<T>)nodeList;
	}
	
	public void putNode(BaseNode node) {
		lock.lock();
		try {
			nodeMap.put(node.nodeId, node);
		} catch(Exception e){
			logger.error(e.toString());
        } finally {
            lock.unlock();
        }
	}
	
	public BaseNode remove(short nodeId) {
		lock.lock();
		BaseNode node = null;
		try {
			node = nodeMap.remove(nodeId);
		} catch(Exception e){
			logger.error(e.toString());
        } finally {
            lock.unlock();
        }
		return node;
	}
	
}
