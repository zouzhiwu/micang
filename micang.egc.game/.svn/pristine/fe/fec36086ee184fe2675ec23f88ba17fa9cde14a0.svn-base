package com.game.service;

import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.RandomUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cb.msg.Message;
import com.cb.msg.MsgSender;
import com.common.entity.Lvxp;
import com.common.entity.Member;
import com.common.entity.Role;
import com.common.enumerate.CurrencyType;
import com.common.enumerate.WorkType;
import com.common.template.LevelTemplate;
import com.common.template.MemberTemplate;
import com.common.util.AssertUtil;
import com.game.common.MessageCode;
import com.game.config.LevelConfig;
import com.game.config.MemberConfig;
import com.game.dao.MemberDao;
import com.game.util.LevelUtil;
import com.game.util.Params;
import com.game.util.PowerUtils;

@Service
public class MemberService {

	@Autowired
	private MemberDao memberDao;

	@Autowired
	private RoleService roleService;

//	private static final Logger logger = LoggerFactory.getLogger(MemberService.class);

	public List<Member> getByList(Long accountId) {
		return memberDao.getByList(accountId);
	}

	public Member getById(Long memberId) {
		return memberDao.getById(memberId);
	}

	/**
	 * 招募队员
	 */
	public Member recruit(Long accountId, Byte currencyIndex, Byte count) {
		CurrencyType currencyType = CurrencyType.getType(currencyIndex);
		AssertUtil.asWarnTrue(currencyType != null, "货币类型不存在");
		// TODO 扣除货币
		// 在队员模板中随机选择一个队员
		List<Integer> memberTemplateIdList = MemberConfig.map.keySet().stream().collect(Collectors.toList());
		// TODO 随机命中
		Integer memberTemplateId = memberTemplateIdList.get(RandomUtils.nextInt(0, memberTemplateIdList.size()));
		return addMember(accountId, memberTemplateId);
	}

	public void addAllMember(Long accountId) {
		MemberConfig.map.forEach((memberTemplateId, memberTemplate) -> {
			addMember(accountId, memberTemplateId);
		});
	}

	private Member addMember(Long accountId, Integer memberTemplateId) {
		Boolean isExist = memberDao.isExistMember(accountId, memberTemplateId);
		if (isExist) {
			// TODO 添加卡牌
			return null;
		} else {
			MemberTemplate memberTemplate = MemberConfig.map.get(memberTemplateId);
			WorkType workType = WorkType.getType(memberTemplate.getPos());
			Member[] members = getWorkMembers(accountId);
			// 查找已上阵的队员位置，如果该位置已经有人，则不设置位置
			if (members[workType.getIndex() - 1] != null) {
				workType = WorkType.Off;
			}
			Member member = new Member();
			member.setTemplateId(memberTemplateId);
			member.setAccountId(accountId);
			member.setStar((byte) 0);
			member.setExp(0);
			member.setStage((byte) 0);
			member.setWork(workType);
			member.setLikeHero1(0);
			member.setLikeVal1(0);
			member.setLikeHero2(0);
			member.setLikeVal2(0);
			member.setLikeHero3(0);
			member.setLikeVal3(0);
			member.setLikeHero4(0);
			member.setLikeVal4(0);
			member.setLikeHero5(0);
			member.setLikeVal5(0);
			member.setMasterSkill(0);
			member.setMaskerSkillLv(0);
			member.setSlaveSkill1(0);
			member.setSlaveSkillLv1(0);
			member.setSlaveSkill2(0);
			member.setSlaveSkillLv2(0);
			member.setSlaveSkill3(0);
			member.setSlaveSkillLv3(0);
			member.setCharacter1(0);
			member.setCharacterVal1(0);
			member.setCharacter2(0);
			member.setCharacterVal2(0);
			member.setCharacter3(0);
			member.setCharacterVal3(0);
			memberDao.add(member);
			return member;
		}
	}

	/**
	 * 上阵队员是否已满
	 */
	public boolean isFullMembers(Member[] members) {
		if (members == null) {
			return false;
		}
		for (int i = 0; i < members.length; i++) {
			if (members[i] == null) {
				return false;
			}
		}
		return true;
	}

	@Transactional
	public void gotoWork(Long accountId, Long topMemberId, Long junMemberId, Long midMemberId, Long adcMemberId,
			Long supMemberId) {

		Member topMember = memberDao.getById(topMemberId);
		AssertUtil.asWarnTrue(topMember != null, "队员不存在");
		AssertUtil.asWarnTrue(topMember.getAccountId().equals(accountId), "上单队员不属于你");
		Member junMember = memberDao.getById(junMemberId);
		AssertUtil.asWarnTrue(junMember != null, "队员不存在");
		AssertUtil.asWarnTrue(junMember.getAccountId().equals(accountId), "打野队员不属于你");
		Member midMember = memberDao.getById(midMemberId);
		AssertUtil.asWarnTrue(midMember != null, "队员不存在");
		AssertUtil.asWarnTrue(midMember.getAccountId().equals(accountId), "中单队员不属于你");
		Member adcMember = memberDao.getById(adcMemberId);
		AssertUtil.asWarnTrue(adcMember != null, "队员不存在");
		AssertUtil.asWarnTrue(adcMember.getAccountId().equals(accountId), "输出队员不属于你");
		Member supMember = memberDao.getById(supMemberId);
		AssertUtil.asWarnTrue(supMember != null, "队员不存在");
		AssertUtil.asWarnTrue(supMember.getAccountId().equals(accountId), "辅助队员不属于你");
		Member[] members = getWorkMembers(accountId);
		// 上单队员上阵
		swapWork(WorkType.Top, topMember, members[WorkType.Top.getIndex() - 1]);
		// 中单队员上阵
		swapWork(WorkType.Mid, midMember, members[WorkType.Mid.getIndex() - 1]);
		// 打野队员上阵
		swapWork(WorkType.Jun, junMember, members[WorkType.Jun.getIndex() - 1]);
		// 辅助队员上阵
		swapWork(WorkType.Sup, supMember, members[WorkType.Sup.getIndex() - 1]);
		// 输出队员上阵
		swapWork(WorkType.Adc, adcMember, members[WorkType.Adc.getIndex() - 1]);
	}

	/***
	 * 从经验罐分配经验给队员升级
	 * @param accountId
	 * @param memberId   队员Id
	 * @param levelCount 升级数量
	 */
	@Transactional
	public void updateLv(Long accountId, long memberId, byte levelCount) {
		Member member = memberDao.getById(memberId);
		AssertUtil.asWarnTrue(member != null, "队员不存在");
		AssertUtil.asWarnTrue(member.getAccountId().equals(accountId), "队员不属于你");
		AssertUtil.asWarnTrue(levelCount == 1 || levelCount == 5, "升级参数错误");
		Role role = roleService.getById(accountId);
		AssertUtil.asWarnTrue(role.getExpPot() > 0, "经验不足");

		byte memberType = Params.type_member;
		Lvxp lvxp = LevelUtil.getLvxp(memberType, member.getExp());
		int maxLv = LevelUtil.getMaxLv(memberType);
		AssertUtil.asWarnTrue(lvxp.getLevel() < maxLv, "已经最大等级");
		// 实际升级到目标等级所需要的经验值
		int expNeed = 0;
		// 如果升1级，则计算升1级所需要的经验值，否则计算升5级所需要的经验值
		if (levelCount == 1) {
			LevelTemplate levelTemplate = LevelConfig.typeLvMap.get(memberType + "_" + lvxp.getLevel());
			if ((lvxp.getXp() + role.getExpPot()) >= levelTemplate.getExp()) {
				expNeed = levelTemplate.getExp() - lvxp.getXp();
			} else {
				expNeed = role.getExpPot();
			}
		} else {
			//利用队员的总经验 经验罐里面的总经验 与升级消耗总经验做对比
			if ((lvxp.getLevel() + levelCount) > maxLv) {
				levelCount = (byte) (maxLv - lvxp.getLevel());
			}
			LevelTemplate targetLevelTemplate = LevelConfig.typeLvMap.get(memberType + "_" + (lvxp.getLevel() + levelCount));
			// 计算实际所需要的经验值
			if ((member.getExp() + role.getExpPot()) <= targetLevelTemplate.getTotalExp()) {
				expNeed = role.getExpPot();
			} else {
				expNeed = targetLevelTemplate.getTotalExp() - member.getExp();
			}
		}
		role.setExpPot(role.getExpPot() - expNeed);
		roleService.update(role);

		member.setExp(member.getExp() + expNeed);
		memberDao.update(member);
		// 当前等级
		int nowLv = LevelUtil.getLvxp(memberType, member.getExp()).getLevel();
		MemberTemplate memberTemplate = MemberConfig.map.get(member.getTemplateId());
		// 战力
		int power = PowerUtils.getPower(memberTemplate, nowLv);
		
		Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_member_update_lv);
		msg.putByte((byte)nowLv);
		msg.putInt(power);
		msg.putInt(member.getExp());
		msg.putInt(role.getExpPot());
		MsgSender.sendMsg(msg);
	}
	
	
	/***
	 * 升级段位
	 * @param accountId
	 * @param memberId
	 */
	@Transactional
	public void updateDuan(Long accountId, long memberId) {

	}

	public void swapWork(WorkType workType, Member onMember, Member offMember) {
		if (offMember == null) {
			onMember.setWork(workType);
			memberDao.update(onMember);
		} else {
			// 如果上阵队员和下阵队员不同，则替换
			if (!onMember.getId().equals(offMember.getId())) {
				// 设置队员下阵
				offMember.setWork(WorkType.Off);
				memberDao.update(offMember);
				// 设置队员上阵
				onMember.setWork(workType);
				memberDao.update(onMember);
			}
		}
	}

	/**
	 * 获取已上阵的队员
	 */
	public Member[] getWorkMembers(Long accountId) {
		List<Member> workMemberList = memberDao.getWorkMemberList(accountId);
		Member[] members = new Member[5];
		for (int i = 0; i < workMemberList.size(); i++) {
			Member member = workMemberList.get(i);
			switch (member.getWork()) {
			case Off:
				break;
			case Top:
				members[WorkType.Top.getIndex() - 1] = member;
				break;
			case Mid:
				members[WorkType.Mid.getIndex() - 1] = member;
				break;
			case Jun:
				members[WorkType.Jun.getIndex() - 1] = member;
				break;
			case Sup:
				members[WorkType.Sup.getIndex() - 1] = member;
				break;
			case Adc:
				members[WorkType.Adc.getIndex() - 1] = member;
				break;
			}
		}
		return members;
	}
}
