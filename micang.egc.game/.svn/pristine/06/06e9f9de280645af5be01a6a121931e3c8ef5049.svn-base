package com.game.listener;

import java.lang.reflect.Method;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.cb.action.MethodClazz;
import com.cb.lisener.AbsLisener;
import com.cb.msg.Action;
import com.cb.util.PackageUtil;
import com.common.util.AssertUtil;
import com.game.factory.Context;

import io.netty.channel.Channel;

@Service
public class Listener extends AbsLisener {
	private static final Logger logger = LoggerFactory.getLogger(Listener.class);
	
	public boolean testToken(Long accountId, Integer tokenDirty) {
		/*if (serverConfig.isTest()) {
			return true;
		}
		if (accountId == 0) {
			return false;
		}
		if (tokenDirty == null) {
			return false;
		}
		String token = accountService.filterDirty(tokenDirty);
		Channel channel = ChannelCache.getChannel(accountId);
		String strToken = ChannelCache.getToken(channel);
		boolean result = StringUtils.equals(strToken, token);
		if (!result) {
			logger.error(String.format("test token=%s strToken=%s fail", token, strToken));
		}
		return result;*/
		return true;
	}
	
	public void channelInactive(Channel currChannel) {
		logger.info("channelInactive");
	}

    public void scan() {
		Set<Class<?>> clazzSet = PackageUtil.getClasses("com.game.action");
		for (Class<?> clazz : clazzSet) {
			Method[] methods = clazz.getMethods();
			for (Method method : methods) {
				Action[] actions = method.getAnnotationsByType(Action.class);
				for (Action action : actions) {
					if (method.isAnnotationPresent(Action.class)) {
						Object instance = Context.getBean(clazz);
						AssertUtil.asErrorTrue(!actionMap.containsKey(action.value()), String.format("Action=%s重复", action.value()));
						actionMap.put(action.value(), new MethodClazz(method, instance));
					}
				}
			}
		}
    }

}
