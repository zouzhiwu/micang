package com.game.action;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cb.msg.Action;
import com.cb.msg.Message;
import com.cb.msg.MsgSender;
import com.game.common.MessageCode;
import com.game.service.FightService;

import io.netty.channel.Channel;

@Service
public class FightAction {

	private static final Logger logger = LoggerFactory.getLogger(FightAction.class);

	@Autowired
	private FightService fightService;
	
	@Action(MessageCode.msg_fight_challenge_request)
	public void requestChallenge(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s", message.getMsgcd(), message.getAccountId()));
		Long beAccountId = message.getLong();		// 被挑战的玩家Id
		fightService.requestChallenge(message.getAccountId(), beAccountId);
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}
	
	@Action(MessageCode.msg_fight_challenge_response)
	public void responseChallenge(Message message, Channel channel) {
		Long asAccountId = message.getLong();
		Boolean isAgree = message.getBoolean();
		fightService.responseChallenge(message.getAccountId(), asAccountId, isAgree);
	}
	
	@Action(MessageCode.msg_fight_choose_member)
	public void chooseMember(Message message, Channel channel) throws Exception {
		Integer roomId = message.getInt();			// 房间Id
		Long topMemberId = message.getLong();		// 上单队员Id
		Long junMemberId = message.getLong();		// 打野队员Id
		Long midMemberId = message.getLong();		// 中单队员Id
		Long adcMemberId = message.getLong();		// 输出队员Id
		Long supMemberId = message.getLong();		// 辅助队员Id
		logger.info(String.format("RESV %d from accountId=%s roomId=%s topMemberId=%s junMemberId=%s midMemberId=%s adcMemberId=%s supMemberId=%s"
				, message.getMsgcd(), message.getAccountId(), roomId, topMemberId, junMemberId, midMemberId, adcMemberId, supMemberId));
		fightService.chooseMember(roomId, message.getAccountId(), topMemberId, junMemberId, midMemberId, adcMemberId, supMemberId);
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}
	
	@Action(MessageCode.msg_fight_ban_hero)
	public void banHero(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s", message.getMsgcd(), message.getAccountId()));
		Integer roomId = message.getInt();				// 房间Id
		Integer banHeroTemplateId = message.getInt();	// 禁用英雄模板Id
		Byte stepIndex = message.getByte();				// 第index步骤，从0开始
		fightService.banHero(roomId, message.getAccountId(), banHeroTemplateId, stepIndex);
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}

	@Action(MessageCode.msg_fight_choose_hero)
	public void chooseHero(Message message, Channel channel) throws Exception {
		logger.info(String.format("RESV %d from accountId=%s", message.getMsgcd(), message.getAccountId()));
		Integer roomId = message.getInt();		// 房间Id
		Long heroId = message.getLong();		// 选择的英雄Id
		Byte pos = message.getByte();			// 队员位置
		Byte stepIndex = message.getByte();		// 第index步骤，从0开始
		fightService.chooseHero(roomId, message.getAccountId(), heroId, pos, stepIndex);
		Message msg = new Message(message);
		MsgSender.sendMsg(msg);
	}
}
