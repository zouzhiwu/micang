package com.game.service;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cb.msg.Message;
import com.cb.msg.MsgSender;
import com.common.entity.Account;
import com.common.template.GachaTemplate;
import com.common.util.AssertUtil;
import com.game.config.CurrencyConfig;
import com.game.config.DropGroupConfig;
import com.game.config.GachaConfig;
import com.game.dao.AccountDao;
import com.game.dao.GachaDao;
import com.game.entity.Gacha;
import com.game.entity.Item;
import com.game.util.ProbabilityExtract;

@Service
public class GachaService {
	@Autowired
	private GachaDao gachaDao;
	
	@Autowired
	private AccountDao accountDao;
	
	@Autowired
	private ItemService itemService;
	
	private static SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
	
	/**抽奖入口**/
	public void gachaMain(Long accountId, Byte typeId, Message message) {
		AssertUtil.asWarnTrue(typeId >0 && typeId <5, "typeId值有误");
		Gacha gachaInfo = getGachaInfo(accountId);
		List<Integer> gachaItemIdList = null;
		switch (typeId) {
		case 1:
			gachaItemIdList = goldGachaOne(accountId, gachaInfo, typeId);
			break;
		case 2:
			gachaItemIdList = goldGachaTen(accountId, gachaInfo, typeId);
			break;
		case 3:
			gachaItemIdList = diamondGachaOne(accountId, gachaInfo, typeId);
			break;
		case 4:
			gachaItemIdList = diamondGachaTen(accountId, gachaInfo, typeId);
			break;
		default:
			break;
		}
		senMessage(gachaInfo, gachaItemIdList, message);
	}
	
	/**根据用户id查询用户的抽奖信息**/
	public Gacha getGachaInfo(Long accountId) {
		Gacha gachaInfo = gachaDao.findById(accountId);
		if (null == gachaInfo) {
			//如果用户第一次抽奖，初始化用户信息
			gachaInfo = new Gacha();
			gachaInfo.setAccountId(accountId);
			gachaInfo.setFreeDiamond(CurrencyConfig.map.get(210).getNumerical());
			gachaInfo.setFreeGold(CurrencyConfig.map.get(200).getNumerical());
			gachaInfo.setGachaCount(0);
			gachaInfo.setHalfDiamond(CurrencyConfig.map.get(280).getNumerical());
			gachaInfo.setLastDiamondNow(new Timestamp(new Date().getTime()));
			gachaInfo.setLastGoldNow(new Timestamp(new Date().getTime()-CurrencyConfig.map.get(220).getNumerical()));
			gachaInfo.setLastTenGold(new Timestamp(new Date().getTime()));
			gachaInfo.setLastHalfDiamondNow(new Timestamp(new Date().getTime()));
			gachaInfo.setTenGold(CurrencyConfig.map.get(230).getNumerical());
			gachaDao.create(gachaInfo);
		}
		return gachaInfo;
	}
	
	/**金币单抽入口**/
	@Transactional
	private List<Integer> goldGachaOne(Long accountId, Gacha gachaInfo, Byte typeId) {
		//时间判断
		Date yesterdayDate = getYesterdayDate();
		//判断抽奖资格
			//如果最后一次金币免费抽在今天之前，今天的免费抽次数重置
		if (gachaInfo.getLastGoldNow().getTime() <= yesterdayDate.getTime()) {
			gachaInfo.setFreeGold(CurrencyConfig.map.get(200).getNumerical());
		} 
		if (gachaInfo.getFreeGold() > 0 ) {
			//用户最后一次抽取免费金币的时间要小于或等于五分钟前
			Long fiveMinutesBefore = new Date().getTime();
			fiveMinutesBefore = fiveMinutesBefore - (CurrencyConfig.map.get(220).getNumerical() * 1000);
			Long time = gachaInfo.getLastGoldNow().getTime();
			AssertUtil.asWarnTrue( time <= fiveMinutesBefore, "免费金币抽间隔时间不足五分钟！");
			gachaInfo.setFreeGold(gachaInfo.getFreeGold() - 1);
			gachaInfo.setLastGoldNow(new Timestamp(new Date().getTime()));
		} else {
			deductAmount(accountId, typeId);
		}
		//抽奖
		List<Integer> resultsList = gacha(typeId, gachaInfo);
		//保存奖品到背包
		resultsList.stream().forEach(itenId -> {
			itemService.itemAdd(itenId, 1, accountId);
		});
		//保存必中奖品
		//保存抽奖信息
		gachaDao.update(gachaInfo);
		//返回结果
		return resultsList;
	}
	
	/**根据抽奖次数抽奖**/
	private List<Integer> gacha(Byte typeId,Gacha gachaInfo ) {
		GachaTemplate gachaTemplate = GachaConfig.map.get((int)typeId);
		List<Integer> resultsList = new ArrayList<Integer>();
		for (int i = 0; i < gachaTemplate.getGachaTimes(); i++) {
			if (gachaTemplate.getCurrencyType() == 1) {
				gachaTwo(gachaTemplate, resultsList);
			}else {
				if ((gachaInfo.getGachaCount() + 1) % CurrencyConfig.map.get(240).getNumerical() == 0) {
					//钻石40抽保底
					Integer groupId = CurrencyConfig.map.get(250).getNumerical();
					gachaThree(resultsList, groupId);
					gachaInfo.setGachaCount(-1);
				}else if ((gachaInfo.getGachaCount() + 1) % CurrencyConfig.map.get(240).getNumerical() == 0){
					//钻石10抽保底
					Integer groupId = CurrencyConfig.map.get(270).getNumerical();
					gachaThree(resultsList, groupId);
				}else {
					gachaTwo(gachaTemplate, resultsList);
				}
				gachaInfo.setGachaCount(gachaInfo.getGachaCount() + 1);
			}
		}
		return resultsList;
	}
	/**正常抽奖流程**/
	private void gachaTwo(GachaTemplate gachaTemplate, List<Integer> resultsList) {
		Integer dropGroup = ProbabilityExtract.outPrize(gachaTemplate.getJackpot());
		gachaThree(resultsList, dropGroup);
	}
	/**正常抽奖核心流程**/
	private void gachaThree(List<Integer> resultsList, Integer dropGroup) {
		Integer index = ProbabilityExtract.outPrize(DropGroupConfig.map.get(dropGroup).getGroupProbability());
		Integer results = null;
		if (index == 1) {
			results = ProbabilityExtract.outPrize(DropGroupConfig.map.get(dropGroup).getItemGroup());
		} else {
			results = ProbabilityExtract.outPrize(DropGroupConfig.map.get(dropGroup).getMemberGroup());
		}
		resultsList.add(results);
	}

	/**获取昨天的日期**/
	private static Date getYesterdayDate() {
		Date yesterdayDate = null;
		Calendar now = Calendar.getInstance();  
		String dateString = now.get(Calendar.YEAR) + "-" + (now.get(Calendar.MONTH) + 1) + "-"+ (now.get(Calendar.DAY_OF_MONTH) - 1);
		try {
			yesterdayDate = ft.parse(dateString +" 23:59:59");
		} catch (ParseException e) {
			e.printStackTrace();
		}
        return yesterdayDate;  
	}
	
	/**金币十连抽入口**/
	@Transactional
	private List<Integer> goldGachaTen(Long accountId, Gacha gachaInfo, Byte typeId) {
		//时间判断
		Date yesterdayDate = getYesterdayDate();
		//判断抽奖资格
		//如果最后一次金币十连抽在今天之前，今天的十连抽次数重置
		if (gachaInfo.getLastTenGold().getTime() <= yesterdayDate.getTime()) {
			gachaInfo.setFreeGold(CurrencyConfig.map.get(230).getNumerical());
		} 
		AssertUtil.asWarnTrue(gachaInfo.getTenGold() > 0, "今天的金币十连抽次数已经用完！");
		gachaInfo.setTenGold(gachaInfo.getTenGold() - 1);
		//判断抽奖资源是否足够//扣除金币
		deductAmount(accountId, typeId);
		//抽奖
		List<Integer> resultsList = gacha(typeId, gachaInfo);
		//保存奖品到背包
		resultsList.stream().forEach(itenId -> {
			itemService.itemAdd(itenId, 1, accountId);
		});
		//保存必中奖品
		//保存抽奖信息
		gachaDao.update(gachaInfo);
		//返回结果
		return resultsList;
	}
	
	//根据支付类型选择扣除对应类型金额
	private void deductAmount(Long accountId, Byte typeId) {
		Account account = accountDao.getById(accountId);
		GachaTemplate gachaTemplate = GachaConfig.map.get((int)typeId);
		if (gachaTemplate.getCurrencyType().equals(1)) { //金币抽奖
			AssertUtil.asWarnTrue(account.getGb() >= gachaTemplate.getNeedCurrency(), "金币不足！！");//判断金币数量
			//扣除金币 --加锁
			Lock lock = new ReentrantLock();// ReentrantLock()是Lock的实现类
			lock.lock();
			try{
				account.setGb(account.getGb()-GachaConfig.map.get((int)typeId).getNeedCurrency());
				accountDao.update(account);
			}finally{
			    lock.unlock();
			}
		} else { //钻石抽奖
			AssertUtil.asWarnTrue(account.getJb() >= gachaTemplate.getNeedCurrency(), "钻石不足！！");//判断钻石数量
			//扣除金币 --加锁
			Lock lock = new ReentrantLock();// ReentrantLock()是Lock的实现类
			lock.lock();
			try{
				account.setGb(account.getJb()-GachaConfig.map.get((int)typeId).getNeedCurrency());
				accountDao.update(account);
			}finally{
			    lock.unlock();
			}
		}
	}
	
	/**钻石单抽入口**/
	@Transactional
	private List<Integer> diamondGachaOne(Long accountId, Gacha gachaInfo, Byte typeId) {
		//时间判断
		Date yesterdayDate = getYesterdayDate();
		//判断背包有没有免费卷
		Map<Integer, Item> itemsInfo = freeSecurities(accountId);
		//判断抽奖资格
			//如果最后一次钻石免费抽在今天之前，今天的免费抽次数重置
		if (gachaInfo.getLastDiamondNow().getTime() <= yesterdayDate.getTime()) {
			gachaInfo.setFreeDiamond(CurrencyConfig.map.get(210).getNumerical());
		} 
		//如果最后一次钻石半价抽在今天之前，今天的半价抽次数重置
		if (gachaInfo.getLastHalfDiamondNow().getTime() <= yesterdayDate.getTime()) {
			gachaInfo.setHalfDiamond(CurrencyConfig.map.get(280).getNumerical());
		} 
		if (gachaInfo.getFreeGold() > 0 ) {//判断免费次数
			gachaInfo.setFreeDiamond(gachaInfo.getFreeDiamond() - 1);
			gachaInfo.setLastDiamondNow(new Timestamp(new Date().getTime()));
		} else if (itemsInfo.get(CurrencyConfig.map.get(290).getNumerical()).getCount() > 0) { //判断道具卷有没有
			itemService.useItem(CurrencyConfig.map.get(290).getNumerical(), 1, accountId);
		} else if (gachaInfo.getHalfDiamond() > 0){ //判断半价
			//判断抽奖资源是否足够
			AssertUtil.asWarnTrue(true, "钻石不足！！");//判断钻石数量
			//扣除钻石
			//改变最后使用半价的时间
			gachaInfo.setLastHalfDiamondNow(new Timestamp(new Date().getTime()));
		} else { //原价购买
			//判断抽奖资源是否足够//扣除钻石
			deductAmount(accountId, typeId);
		}
		//正常抽奖
		List<Integer> resultsList = gacha(typeId, gachaInfo);
		//保存奖品到背包
		resultsList.stream().forEach(itenId -> {
			itemService.itemAdd(itenId, 1, accountId);
		});
		//保存必送道具id
		//保存抽奖信息
		gachaDao.update(gachaInfo);
		return  resultsList;
	}
	
	/**判断背包有没有免费卷**/
	public Map<Integer, Item> freeSecurities(Long accountId) {
		ArrayList<Integer> itemIdList = new ArrayList<Integer>();
		itemIdList.add(CurrencyConfig.map.get(290).getNumerical());
		Map<Integer, Item> itemsInfo = itemService.itemsInfo(accountId, itemIdList);
		return itemsInfo;
	}
	
	/**钻石十连抽入口
	 * @return **/
	@Transactional
	private List<Integer> diamondGachaTen(Long accountId, Gacha gachaInfo, Byte typeId) {
		//判断抽奖资源是否足够//扣除钻石
		deductAmount(accountId, typeId);
		//抽奖
		List<Integer> resultsList = gacha(typeId, gachaInfo);
		//保存奖品到背包
		resultsList.stream().forEach(itenId -> {
			itemService.itemAdd(itenId, 1, accountId);
		});
		//保存必送道具id
		//保存抽奖信息
		gachaDao.update(gachaInfo);
		return resultsList;
	}
	/**发送抽奖消息**/
	private void senMessage(Gacha gachaInfo, List<Integer> itemIsList, Message message) {
		Map<Integer, Item> itemMap = freeSecurities(gachaInfo.getAccountId());
		Message msg = new Message(message);
		msg.putByte(gachaInfo.getFreeGold().byteValue());
		msg.putByte(gachaInfo.getFreeDiamond().byteValue());
		msg.putInt(itemMap.get(CurrencyConfig.map.get(290).getNumerical()).getCount());
		msg.putByte(gachaInfo.getHalfDiamond().byteValue());
		msg.putByte(gachaInfo.getTenGold().byteValue());
		msg.putLong(gachaInfo.getLastGoldNow().getTime());
		msg.putShort(itemIsList.size());
		itemIsList.stream().forEach(itemId -> {
			msg.putInt(itemId);
			msg.putInt(1); //暂时写死，后如果要写活，该字段需要读取xlsx文件
		});
		MsgSender.sendMsg(msg);
	}
}
