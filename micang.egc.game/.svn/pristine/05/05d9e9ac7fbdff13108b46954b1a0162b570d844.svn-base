package com.game.node;

import org.quartz.JobKey;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cb.msg.Message;
import com.common.enumerate.TargetType;
import com.common.util.GameUtil;
import com.game.common.MessageCode;
import com.game.entity.Room;
import com.game.helper.MsgHelper;
import com.game.job.JobScheduler;

/***
 * 具备视野性质和攻击性质的抽象节点
 */
public abstract class BaseAttackNode extends BaseNode {
	private static final Logger logger = LoggerFactory.getLogger(BaseAttackNode.class);
    public Target target;
    public JobKey attackJobKey;
    /**视野JobKey */
	public JobKey updateVisionJobKey;
    
    public abstract void startAttack();
    
    public abstract void stopAttack();
    
    public void attack(JobKey jobKey, short aoe) {
        // 如果目标是节点，则计算攻击伤害
        if (target.type == TargetType.Node) {
            // 如果当前位置和目标位置小于射程，则减少对方血量
            if (GameUtil.distance(this.location, target.node.location) <= aoe) {
                // 扣血，并处理小于0的情况
            	target.node.hp -= 100;
                // 如果对方血量为0，则结束攻击
                if (target.node.hp <= 0) {
                	target.node.hp = 0;
                    // 阵亡处理
                	target.node.die(this);
                    JobScheduler.stopJob(jobKey);
                }
                sendHpMessage(room, target.node);
            } else {
            	JobScheduler.stopJob(jobKey);
            }
        } else {
        	logger.error(String.format("nodeId(%d)攻击攻击目标错误", this.nodeId));
        }
    }
    
    private void sendHpMessage(Room room, BaseNode node) {
    	Message msg = new Message();
		msg.setMsgcd(MessageCode.msg_fight_hp_notice);
		msg.putShort(node.nodeId);
		msg.putInt(node.hp);
		MsgHelper.sendBroadcast(msg, room);
    }
    
}
