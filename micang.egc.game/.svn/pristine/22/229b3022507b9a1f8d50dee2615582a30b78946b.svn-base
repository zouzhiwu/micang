package com.game.node;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.common.entity.Location;
import com.common.enumerate.CampType;
import com.common.enumerate.NodeType;
import com.common.template.NodeTemplate;
import com.game.entity.Room;

public class CrystalNode extends BaseNode {
	private static final Logger logger = LoggerFactory.getLogger(CrystalNode.class);
	
	public CrystalNode(short nodeId, Room room, NodeTemplate template, CampType camp) {
		this.nodeId = nodeId;
		this.room = room;
		this.template = template;
		this.location = new Location(template.getX(), template.getY());
		this.selfCamp = camp;
		setEnemyCamp();
		this.hp = template.getHp();
	}
	
	public NodeType getNodeType() {
		return NodeType.Crystal;
	}

	@Override
	public void die(BaseNode attackNode) {
		logger.info(String.format("nodeId=%d阵亡", this.nodeId));
		room.remove(this.nodeId);
		List<BaseNode> nodeList = room.getAllList();
		for (BaseNode node : nodeList) {
			if (BaseMoveNode.class.isAssignableFrom(node.getClass())) {
				BaseMoveNode baseMoveNode = (BaseMoveNode) node;
				boolean isRemove = baseMoveNode.visionList.remove(this);
				logger.info(String.format("节点%d 视野列表中移除nodeId=%d isRemove=%s", baseMoveNode.nodeId, this.nodeId, isRemove));
			}
		}
	}
}
